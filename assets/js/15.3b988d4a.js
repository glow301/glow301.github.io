(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{510:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("在我们写代码的时候，代码的可读性，维护性似乎是永远避不开的话题。尽管我们每个人都想写出易于维护，可读性高的代码，但是在实际项目中，结果往往都不尽如人意。每当我们接手一个别人的项目时，几乎都是充斥着批判，心里说着是谁写的这么烂的代码。但是轮到我们自己的时候，可能结果真的比前人好不了多少，等到后人接手我们的项目时，十有八九也会像我们当时接手一样，心里默默的谴责着。")]),s._v(" "),a("p",[s._v("如果要用一句话总结这本书，我觉得应该就是"),a("strong",[s._v("代码是写给人看的，只是恰好可以被机器执行而已")]),s._v("。任何一个人都可以写出计算机可以理解的代码，我们要写出人类容易理解的代码。")]),s._v(" "),a("p",[s._v("书中给我印象比较深的一个例子，在我们日常工作中，其实真正写代码所花费的时间是很少的，大部分时间其实是在滚动屏幕，看其他地方的代码。也就是说我们读代码的时间要远多于写代码的时间，可见代码的可读性是多么的重要。")]),s._v(" "),a("p",[s._v("下面是给我印象比较深和我比较认可的一些点，可能不是完全都出自代码整洁之道这本书。")]),s._v(" "),a("h2",{attrs:{id:"代码的上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码的上下文"}},[s._v("#")]),s._v(" 代码的上下文")]),s._v(" "),a("p",[s._v("假设我们现在有一个求学生考试平均分的函数。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStudentsAverageScore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stuIDs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" totalScore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" averageScore "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float64")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stuIDs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" stuIDs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStudentScore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        totalScore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" score\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    averageScore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" totalScore "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stuIDs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" averageScore\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ul",[a("li",[s._v("for 循环里的变量 "),a("code",[s._v("s")]),s._v("，虽然变量名看起来没有什么实际含义，但是定义的地方和使用的地方只差了 1 行，而且逻辑很简单，所以在阅读的时候并没有感到障碍。但是如果这个循环中又嵌套了一个循环，然后变量 "),a("code",[s._v("s")]),s._v(" 在 50 行之后才会使用到，那么阅读起来就会有一些费劲了，你需要不断滚动屏幕来查看变量的声明。")]),s._v(" "),a("li",[s._v("同理，变量 "),a("code",[s._v("averageScore")]),s._v(" 距离声明处只有 10 行左右，所以不会感到有障碍。但是如果变量的使用和声明中间差了上百行，那么读起来就相当费劲了，不仅需要来回滚动屏幕，有时候甚至你不知道它是一个局部变量还是全局变量。")])]),s._v(" "),a("p",[s._v("所以，尽量让变量在使用的时候再声明，这样可以避免一些上下文的切换，让别人更好的理解。")]),s._v(" "),a("h2",{attrs:{id:"命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[s._v("#")]),s._v(" 命名")]),s._v(" "),a("p",[s._v("命名其实真不是一件容易的事，有时候为了相出一个好名字，需要花费不少时间。总结一下，有这么几个方面:")]),s._v(" "),a("h4",{attrs:{id:"命名要有意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名要有意义"}},[s._v("#")]),s._v(" 命名要有意义")]),s._v(" "),a("p",[s._v("对比下面两个例子")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" d time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Time "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the expire date")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" expireDate time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Time\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("明显第二张情况要好于第一种，对于不好的命名，我们往往需要通过注释来解释它。")]),s._v(" "),a("h4",{attrs:{id:"避免变量名中带有类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免变量名中带有类型"}},[s._v("#")]),s._v(" 避免变量名中带有类型")]),s._v(" "),a("p",[s._v("看下面这段代码，哪一种更好呢？")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" accountList "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" accounts "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("其实，"),a("code",[s._v("[]int")]),s._v(" 类型已经告诉我们，这个变量是一个 list 了，没有必要在变量名中说明类型。 即使使用的是弱类型语言，通过名词的复数形式，也可以说明是一个 list。如果 accounts 不能描述清楚的话，用 accountList 一定会比 accounts 好吗？")]),s._v(" "),a("h4",{attrs:{id:"上下文不要太远"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文不要太远"}},[s._v("#")]),s._v(" 上下文不要太远")]),s._v(" "),a("p",[s._v("上面已经说过，变量的声明和使用距离太远会增加我们阅读的成本。尽量让变量的使用和声明可以在一屏内找到。")]),s._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("只要写代码，你一定会用到函数。我们要做的，就是要保持函数尽可能的简单。这里说的简单，不仅仅是逻辑简单，还包括函数的长度，参数的个数等，相信没有人会愿意去读一个上千行的函数吧。")]),s._v(" "),a("h3",{attrs:{id:"单一职责"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一职责"}},[s._v("#")]),s._v(" 单一职责")]),s._v(" "),a("p",[s._v("一个函数就应该做好一件事，这样才能保持简单。一个很典型的反例是通过标识符来判断函数的行为。")]),s._v(" "),a("p",[s._v("看下面这段代码")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xxx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" flag "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something ")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这明显违背了函数的单一职责原则，完全可以拆分成两个函数。从而避免引入一个标识符来增加函数的复杂性。")]),s._v(" "),a("p",[s._v("另一个例子是查询和修改，即在一个函数中同时做了查询和修改的操作，比如这样。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAndUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("比较推荐的做法是将查询和修改分离。我们可以在一个函数中执行查询和修改，但是应该是调用两个独立的函数。可以记住这样一句话："),a("strong",[s._v("任何有返回值的函数，都不应该有看得见的副作用")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"参数个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数个数"}},[s._v("#")]),s._v(" 参数个数")]),s._v(" "),a("p",[s._v("函数参数的个数应该尽可能的少。1 个参数要比两个参数的简单，如果函数的参数超过 3 个，就需要考虑把其中一些参数封装成类了。")]),s._v(" "),a("p",[s._v("多个参数的函数，特别是在这些参数的类型相同的时候，会更加难以区分。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在调用的时候，会有很大概率将参数的顺序搞错。相信有很多人在使用 "),a("code",[s._v("assert.Equal(expect, actual)")]),s._v(" 的时候，经常搞错 expect 和 actual 的顺序。")]),s._v(" "),a("h2",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),a("p",[s._v("什么也没有良好的注释有用，什么也没有糟糕的注释更有破坏性。")]),s._v(" "),a("p",[s._v("在代码迭代的过程中，注释很难保证得到及时的更新。而且，有时候注释并不准确，甚至是在说明错误的事。真正可以相信的只有代码，因为代码才是真正执行的。所以，当需要写注释的时候，可以先想想能不能用代码表达。")]),s._v(" "),a("p",[s._v("我曾经在国内某 top2 大厂见过如下代码")]),s._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @params $arr array(\n *     'xxx' => array(\n *         ... \n *     )\n * )\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// some code ...")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$data")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("json_decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// some code ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("一个新接手这个项目的人，看到如此“详细”的注释，第一反应肯定是参数是一个数组。仔细看代码才会发现，实际传进来的参数是一个 json。这样的注释反而让人更加的迷惑。")]),s._v(" "),a("h3",{attrs:{id:"应该有的注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应该有的注释"}},[s._v("#")]),s._v(" 应该有的注释")]),s._v(" "),a("ul",[a("li",[s._v("法律/版权信息")]),s._v(" "),a("li",[s._v("对意图的解释")]),s._v(" "),a("li",[s._v("警示")]),s._v(" "),a("li",[s._v("TODO (需要及时清理)")])]),s._v(" "),a("h3",{attrs:{id:"不应该有的注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不应该有的注释"}},[s._v("#")]),s._v(" 不应该有的注释")]),s._v(" "),a("ul",[a("li",[s._v("多余的注释（不能提供比代码更多的信息）")]),s._v(" "),a("li",[s._v("误导性注释（更新不及时，注释不精确）")]),s._v(" "),a("li",[s._v("日志式/HTML 注释")]),s._v(" "),a("li",[s._v("注释掉的代码（已经有版本控制系统了）")])]),s._v(" "),a("h2",{attrs:{id:"格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[s._v("#")]),s._v(" 格式")]),s._v(" "),a("p",[s._v("代码的格式，不仅仅包括代码的风格，还应该包含代码文件的长度，组织方式等。")]),s._v(" "),a("ul",[a("li",[s._v("相关的概念应该放在一起，而不是分散在各个文件中。")]),s._v(" "),a("li",[s._v("相关的函数应该放在一起，调用者应该放在被调用者上面。")]),s._v(" "),a("li",[s._v("使用空格/空行来增加代码可读性。")])]),s._v(" "),a("h2",{attrs:{id:"单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[s._v("#")]),s._v(" 单元测试")]),s._v(" "),a("p",[s._v("测试代码和生产代码一样重要。它一样需要被思考，被设计和照料。应该像生产代码一样保持整洁。")]),s._v(" "),a("h3",{attrs:{id:"每个测试一个断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每个测试一个断言"}},[s._v("#")]),s._v(" 每个测试一个断言")]),s._v(" "),a("p",[s._v("单个测试中的断言数量应该最小化。尽量保持在一个测试函数中只测试一个概念，避免出现超长的测试函数。")]),s._v(" "),a("h3",{attrs:{id:"first-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#first-原则"}},[s._v("#")]),s._v(" FIRST 原则")]),s._v(" "),a("ul",[a("li",[s._v("快速（Fast）\n"),a("ul",[a("li",[s._v("测试应该可以快速运行。测试运行缓慢，你就不会想要频繁运行它。")])])]),s._v(" "),a("li",[s._v("独立（Independent）\n"),a("ul",[a("li",[s._v("测试应该互相独立。某个测试不应该为下一个测试设定条件。")])])]),s._v(" "),a("li",[s._v("可重复（Repeatable）\n"),a("ul",[a("li",[s._v("测试应该在任何环境中重复通过。测试应该可以在生产环节，开发环境，无网络的环境通过。")])])]),s._v(" "),a("li",[s._v("自我验证（Self-Validating）\n"),a("ul",[a("li",[s._v("无论测试通过还是失败，都不应该通过日志来确认测试是否通过。")])])]),s._v(" "),a("li",[s._v("及时（Timely）\n"),a("ul",[a("li",[s._v("测试应该及时编写。")])])])]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("软件项目的主要成本在于长期维护，所以保持代码的整洁是非常重要的。")]),s._v(" "),a("ul",[a("li",[s._v("函数的长度，参数个数，类的大小应保持尽可能的短。符合单一职责。")]),s._v(" "),a("li",[s._v("注释不能美化糟糕的代码，如果需要注释，先尝试是否可以用代码说明。")]),s._v(" "),a("li",[s._v("单元测试和生产代码一样重要，也应该保持整洁。")]),s._v(" "),a("li",[s._v("系统应该是由多个短小的类，而不是几个巨大的类组成。")])]),s._v(" "),a("p",[s._v("由于作者水平有限，不能列出书中所有的点。如果只能记住一句话的话，那就是"),a("strong",[s._v("代码是写给人看的，只是恰好可以被机器执行而已")]),s._v("。")])])}),[],!1,null,null,null);t.default=e.exports}}]);